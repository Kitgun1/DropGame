//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/_Project/Inputs/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""Mouse"",
            ""id"": ""d6a300c6-4cb7-4569-8c9a-e52037b47cbe"",
            ""actions"": [
                {
                    ""name"": ""LBC"",
                    ""type"": ""Value"",
                    ""id"": ""f59046b5-342e-4bf7-8b5c-fcf699f8ae16"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MBC"",
                    ""type"": ""Value"",
                    ""id"": ""dc315e45-7185-4b38-b180-6563c1ef7d2d"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RBC"",
                    ""type"": ""Value"",
                    ""id"": ""30d431fd-40a1-4c7c-8928-3e0271fef3b0"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Delta"",
                    ""type"": ""Value"",
                    ""id"": ""6f4c25eb-88bc-427b-af84-742d1ef71c80"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Position"",
                    ""type"": ""Value"",
                    ""id"": ""173d8daa-3aa4-4216-a26f-b0993043f146"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LBC Delayed"",
                    ""type"": ""PassThrough"",
                    ""id"": ""eea45ef8-3d19-4a5d-ad16-3e9e0312e11c"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""653137b2-719d-4b35-a427-e20d900d000c"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""LBC"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""db7a4ab8-dbbf-48de-9b22-d9c327033900"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""RBC"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cb6bd250-fc3b-412d-af59-6cfdfdb2f01a"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Delta"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e11b2a5f-1b68-4a10-b269-3e87df4bc385"",
                    ""path"": ""<Touchscreen>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mobile"",
                    ""action"": ""Delta"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""849621f4-0ddd-447b-93d4-223a9417f269"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""33a569ef-bee5-4c97-9204-8c37bd27596e"",
                    ""path"": ""<Touchscreen>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mobile"",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""21b624ea-83fc-4f09-b42f-5757919ce806"",
                    ""path"": ""<Mouse>/middleButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""MBC"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f46dceee-e944-41be-82b9-c3fbe3e22b57"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Hold(duration=0.1,pressPoint=0.5)"",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""LBC Delayed"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Main Hotkeys"",
            ""id"": ""03e14672-9b46-44fe-b0b1-592654ab23fa"",
            ""actions"": [
                {
                    ""name"": ""Open/Close Inventory"",
                    ""type"": ""Button"",
                    ""id"": ""79fcd514-dc37-4c45-83ad-4723de05695b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Open/Close Menu"",
                    ""type"": ""Button"",
                    ""id"": ""0730afcf-f352-480d-8f44-0770dba49edd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""1c8c3a99-c94b-4245-b3d7-448f67782217"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Open/Close Inventory"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8ef2e426-71db-48fa-b2be-0d9021e526fe"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Open/Close Menu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""PC"",
            ""bindingGroup"": ""PC"",
            ""devices"": []
        },
        {
            ""name"": ""Mobile"",
            ""bindingGroup"": ""Mobile"",
            ""devices"": []
        }
    ]
}");
        // Mouse
        m_Mouse = asset.FindActionMap("Mouse", throwIfNotFound: true);
        m_Mouse_LBC = m_Mouse.FindAction("LBC", throwIfNotFound: true);
        m_Mouse_MBC = m_Mouse.FindAction("MBC", throwIfNotFound: true);
        m_Mouse_RBC = m_Mouse.FindAction("RBC", throwIfNotFound: true);
        m_Mouse_Delta = m_Mouse.FindAction("Delta", throwIfNotFound: true);
        m_Mouse_Position = m_Mouse.FindAction("Position", throwIfNotFound: true);
        m_Mouse_LBCDelayed = m_Mouse.FindAction("LBC Delayed", throwIfNotFound: true);
        // Main Hotkeys
        m_MainHotkeys = asset.FindActionMap("Main Hotkeys", throwIfNotFound: true);
        m_MainHotkeys_OpenCloseInventory = m_MainHotkeys.FindAction("Open/Close Inventory", throwIfNotFound: true);
        m_MainHotkeys_OpenCloseMenu = m_MainHotkeys.FindAction("Open/Close Menu", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Mouse
    private readonly InputActionMap m_Mouse;
    private List<IMouseActions> m_MouseActionsCallbackInterfaces = new List<IMouseActions>();
    private readonly InputAction m_Mouse_LBC;
    private readonly InputAction m_Mouse_MBC;
    private readonly InputAction m_Mouse_RBC;
    private readonly InputAction m_Mouse_Delta;
    private readonly InputAction m_Mouse_Position;
    private readonly InputAction m_Mouse_LBCDelayed;
    public struct MouseActions
    {
        private @PlayerInput m_Wrapper;
        public MouseActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @LBC => m_Wrapper.m_Mouse_LBC;
        public InputAction @MBC => m_Wrapper.m_Mouse_MBC;
        public InputAction @RBC => m_Wrapper.m_Mouse_RBC;
        public InputAction @Delta => m_Wrapper.m_Mouse_Delta;
        public InputAction @Position => m_Wrapper.m_Mouse_Position;
        public InputAction @LBCDelayed => m_Wrapper.m_Mouse_LBCDelayed;
        public InputActionMap Get() { return m_Wrapper.m_Mouse; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MouseActions set) { return set.Get(); }
        public void AddCallbacks(IMouseActions instance)
        {
            if (instance == null || m_Wrapper.m_MouseActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MouseActionsCallbackInterfaces.Add(instance);
            @LBC.started += instance.OnLBC;
            @LBC.performed += instance.OnLBC;
            @LBC.canceled += instance.OnLBC;
            @MBC.started += instance.OnMBC;
            @MBC.performed += instance.OnMBC;
            @MBC.canceled += instance.OnMBC;
            @RBC.started += instance.OnRBC;
            @RBC.performed += instance.OnRBC;
            @RBC.canceled += instance.OnRBC;
            @Delta.started += instance.OnDelta;
            @Delta.performed += instance.OnDelta;
            @Delta.canceled += instance.OnDelta;
            @Position.started += instance.OnPosition;
            @Position.performed += instance.OnPosition;
            @Position.canceled += instance.OnPosition;
            @LBCDelayed.started += instance.OnLBCDelayed;
            @LBCDelayed.performed += instance.OnLBCDelayed;
            @LBCDelayed.canceled += instance.OnLBCDelayed;
        }

        private void UnregisterCallbacks(IMouseActions instance)
        {
            @LBC.started -= instance.OnLBC;
            @LBC.performed -= instance.OnLBC;
            @LBC.canceled -= instance.OnLBC;
            @MBC.started -= instance.OnMBC;
            @MBC.performed -= instance.OnMBC;
            @MBC.canceled -= instance.OnMBC;
            @RBC.started -= instance.OnRBC;
            @RBC.performed -= instance.OnRBC;
            @RBC.canceled -= instance.OnRBC;
            @Delta.started -= instance.OnDelta;
            @Delta.performed -= instance.OnDelta;
            @Delta.canceled -= instance.OnDelta;
            @Position.started -= instance.OnPosition;
            @Position.performed -= instance.OnPosition;
            @Position.canceled -= instance.OnPosition;
            @LBCDelayed.started -= instance.OnLBCDelayed;
            @LBCDelayed.performed -= instance.OnLBCDelayed;
            @LBCDelayed.canceled -= instance.OnLBCDelayed;
        }

        public void RemoveCallbacks(IMouseActions instance)
        {
            if (m_Wrapper.m_MouseActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMouseActions instance)
        {
            foreach (var item in m_Wrapper.m_MouseActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MouseActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MouseActions @Mouse => new MouseActions(this);

    // Main Hotkeys
    private readonly InputActionMap m_MainHotkeys;
    private List<IMainHotkeysActions> m_MainHotkeysActionsCallbackInterfaces = new List<IMainHotkeysActions>();
    private readonly InputAction m_MainHotkeys_OpenCloseInventory;
    private readonly InputAction m_MainHotkeys_OpenCloseMenu;
    public struct MainHotkeysActions
    {
        private @PlayerInput m_Wrapper;
        public MainHotkeysActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @OpenCloseInventory => m_Wrapper.m_MainHotkeys_OpenCloseInventory;
        public InputAction @OpenCloseMenu => m_Wrapper.m_MainHotkeys_OpenCloseMenu;
        public InputActionMap Get() { return m_Wrapper.m_MainHotkeys; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MainHotkeysActions set) { return set.Get(); }
        public void AddCallbacks(IMainHotkeysActions instance)
        {
            if (instance == null || m_Wrapper.m_MainHotkeysActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MainHotkeysActionsCallbackInterfaces.Add(instance);
            @OpenCloseInventory.started += instance.OnOpenCloseInventory;
            @OpenCloseInventory.performed += instance.OnOpenCloseInventory;
            @OpenCloseInventory.canceled += instance.OnOpenCloseInventory;
            @OpenCloseMenu.started += instance.OnOpenCloseMenu;
            @OpenCloseMenu.performed += instance.OnOpenCloseMenu;
            @OpenCloseMenu.canceled += instance.OnOpenCloseMenu;
        }

        private void UnregisterCallbacks(IMainHotkeysActions instance)
        {
            @OpenCloseInventory.started -= instance.OnOpenCloseInventory;
            @OpenCloseInventory.performed -= instance.OnOpenCloseInventory;
            @OpenCloseInventory.canceled -= instance.OnOpenCloseInventory;
            @OpenCloseMenu.started -= instance.OnOpenCloseMenu;
            @OpenCloseMenu.performed -= instance.OnOpenCloseMenu;
            @OpenCloseMenu.canceled -= instance.OnOpenCloseMenu;
        }

        public void RemoveCallbacks(IMainHotkeysActions instance)
        {
            if (m_Wrapper.m_MainHotkeysActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMainHotkeysActions instance)
        {
            foreach (var item in m_Wrapper.m_MainHotkeysActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MainHotkeysActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MainHotkeysActions @MainHotkeys => new MainHotkeysActions(this);
    private int m_PCSchemeIndex = -1;
    public InputControlScheme PCScheme
    {
        get
        {
            if (m_PCSchemeIndex == -1) m_PCSchemeIndex = asset.FindControlSchemeIndex("PC");
            return asset.controlSchemes[m_PCSchemeIndex];
        }
    }
    private int m_MobileSchemeIndex = -1;
    public InputControlScheme MobileScheme
    {
        get
        {
            if (m_MobileSchemeIndex == -1) m_MobileSchemeIndex = asset.FindControlSchemeIndex("Mobile");
            return asset.controlSchemes[m_MobileSchemeIndex];
        }
    }
    public interface IMouseActions
    {
        void OnLBC(InputAction.CallbackContext context);
        void OnMBC(InputAction.CallbackContext context);
        void OnRBC(InputAction.CallbackContext context);
        void OnDelta(InputAction.CallbackContext context);
        void OnPosition(InputAction.CallbackContext context);
        void OnLBCDelayed(InputAction.CallbackContext context);
    }
    public interface IMainHotkeysActions
    {
        void OnOpenCloseInventory(InputAction.CallbackContext context);
        void OnOpenCloseMenu(InputAction.CallbackContext context);
    }
}
